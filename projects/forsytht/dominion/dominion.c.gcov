        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 380 returned 100% blocks executed 83%
      380:    8:int compare(const void* a, const void* b) {
      380:    8-block  0
      380:    9:  if (*(int*)a > *(int*)b)
      380:    9-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 380
    #####:   10:    return 1;
    $$$$$:   10-block  0
unconditional  0 never executed
      380:   11:  if (*(int*)a < *(int*)b)
      380:   11-block  0
branch  0 taken 104 (fallthrough)
branch  1 taken 276
      104:   12:    return -1;
      104:   12-block  0
unconditional  0 taken 104
      276:   13:  return 0;
      276:   13-block  0
unconditional  0 taken 276
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 6 returned 100% blocks executed 89%
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        6:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
        6:   44-block  0
call    0 returned 6
        6:   45:  PutSeed((long)randomSeed);
call    0 returned 6
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 6
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
        6:   57-block  0
unconditional  0 taken 6
       60:   57-block  1
unconditional  1 taken 60
       66:   57-block  2
branch  2 taken 60
branch  3 taken 6 (fallthrough)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
       60:   59-block  0
unconditional  0 taken 60
      600:   59-block  1
unconditional  1 taken 600
      660:   59-block  2
branch  2 taken 600
branch  3 taken 60 (fallthrough)
        -:   60:        {
      600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      600:   61-block  0
branch  0 taken 540 (fallthrough)
branch  1 taken 60
      540:   61-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 540
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
        6:   73-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    $$$$$:   75-block  0
unconditional  0 never executed
        -:   76:    }
        6:   77:  else if (numPlayers == 3)
        6:   77-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
unconditional  0 never executed
        -:   80:    }
        -:   81:  else
        -:   82:    {
        6:   83:      state->supplyCount[curse] = 30;
        6:   83-block  0
unconditional  0 taken 6
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
        6:   87-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    $$$$$:   91-block  0
unconditional  0 never executed
        -:   92:    }
        -:   93:  else
        -:   94:    {
        6:   95:      state->supplyCount[estate] = 12;
        6:   96:      state->supplyCount[duchy] = 12;
        6:   97:      state->supplyCount[province] = 12;
        6:   97-block  0
unconditional  0 taken 6
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        6:  106-block  0
unconditional  0 taken 6
      120:  106-block  1
unconditional  1 taken 120
      126:  106-block  2
branch  2 taken 120
branch  3 taken 6 (fallthrough)
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
      120:  108-block  0
unconditional  0 taken 120
      870:  108-block  1
unconditional  1 taken 870
      990:  108-block  2
branch  2 taken 930
branch  3 taken 60 (fallthrough)
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
      930:  110-block  0
branch  0 taken 60 (fallthrough)
branch  1 taken 870
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       60:  113-block  0
branch  0 taken 54 (fallthrough)
branch  1 taken 6
       54:  113-block  1
branch  2 taken 6 (fallthrough)
branch  3 taken 48
        -:  114:		{
       24:  115:		  if (numPlayers == 2){ 
       12:  115-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
       12:  115-block  1
unconditional  2 taken 12
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
unconditional  0 never executed
        -:  117:		  }
       12:  118:		  else{ state->supplyCount[i] = 12; }
       12:  118-block  0
unconditional  0 taken 12
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       48:  122:		  state->supplyCount[i] = 10;
       48:  122-block  0
unconditional  0 taken 48
        -:  123:		}
       60:  124:	      break;
       60:  124-block  0
unconditional  0 taken 60
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
        6:  138-block  0
unconditional  0 taken 6
       24:  138-block  1
unconditional  1 taken 24
       30:  138-block  2
branch  2 taken 24
branch  3 taken 6 (fallthrough)
        -:  139:    {
       24:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
       24:  141-block  0
unconditional  0 taken 24
       72:  141-block  1
unconditional  1 taken 72
       96:  141-block  2
branch  2 taken 72
branch  3 taken 24 (fallthrough)
        -:  142:	{
       72:  143:	  state->deck[i][j] = estate;
       72:  144:	  state->deckCount[i]++;
        -:  145:	}
      192:  146:      for (j = 3; j < 10; j++)
       24:  146-block  0
unconditional  0 taken 24
      168:  146-block  1
unconditional  1 taken 168
      192:  146-block  2
branch  2 taken 168
branch  3 taken 24 (fallthrough)
        -:  147:	{
      168:  148:	  state->deck[i][j] = copper;
      168:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
        6:  154-block  0
unconditional  0 taken 6
       24:  154-block  1
unconditional  1 taken 24
       30:  154-block  2
branch  2 taken 24
branch  3 taken 6 (fallthrough)
        -:  155:    {
       24:  156:      if ( shuffle(i, state) < 0 )
       24:  156-block  0
call    0 returned 24
branch  1 taken 0 (fallthrough)
branch  2 taken 24
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
        6:  163-block  0
unconditional  0 taken 6
       24:  163-block  1
unconditional  1 taken 24
       30:  163-block  2
branch  2 taken 24
branch  3 taken 6 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       24:  166:      state->handCount[i] = 0;
       24:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
        6:  176-block  0
unconditional  0 taken 6
      162:  176-block  1
unconditional  1 taken 162
      168:  176-block  2
branch  2 taken 162
branch  3 taken 6 (fallthrough)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
        6:  192-block  0
unconditional  0 taken 6
unconditional  1 taken 30
       36:  192-block  1
branch  2 taken 30
branch  3 taken 6 (fallthrough)
       30:  193:    drawCard(state->whoseTurn, state);
       30:  193-block  0
call    0 returned 30
        -:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
        6:  196-block  0
call    0 returned 6
        -:  197:
        6:  198:  return 0;
unconditional  0 taken 6
        -:  199:}
        -:  200:
function shuffle called 40 returned 100% blocks executed 100%
       40:  201:int shuffle(int player, struct gameState *state) {
       40:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       40:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       40:  209:  if (state->deckCount[player] < 1)
       40:  209-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 28
       12:  210:    return -1;
       12:  210-block  0
unconditional  0 taken 12
       28:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
       28:  211-block  0
call    0 returned 28
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      288:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 28
      288:  214-block  0
branch  1 taken 260
branch  2 taken 28 (fallthrough)
      260:  215:    card = floor(Random() * state->deckCount[player]);
      260:  215-block  0
call    0 returned 260
      260:  216:    newDeck[newDeckPos] = state->deck[player][card];
      260:  217:    newDeckPos++;
      866:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 260
      606:  218-block  0
unconditional  1 taken 606
      866:  218-block  1
branch  2 taken 606
branch  3 taken 260 (fallthrough)
      606:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      260:  221:    state->deckCount[player]--;
      260:  221-block  0
unconditional  0 taken 260
        -:  222:  }
      288:  223:  for (i = 0; i < newDeckPos; i++) {
       28:  223-block  0
unconditional  0 taken 28
      260:  223-block  1
unconditional  1 taken 260
      288:  223-block  2
branch  2 taken 260
branch  3 taken 28 (fallthrough)
      260:  224:    state->deck[player][i] = newDeck[i];
      260:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       40:  228:  return 0;
       28:  228-block  0
unconditional  0 taken 28
       40:  228-block  1
unconditional  1 taken 40
        -:  229:}
        -:  230:
function playCard called 6 returned 100% blocks executed 73%
        6:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        6:  231-block  0
        -:  232:{	
        -:  233:  int card;
        6:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        6:  237:  if (state->phase != 0)
        6:  237-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        6:  243:  if ( state->numActions < 1 )
        6:  243-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        6:  249:  card = handCard(handPos, state);
        6:  249-block  0
call    0 returned 6
        -:  250:	
        -:  251:  //check if selected card is an action
        6:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  252-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 6
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        6:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        6:  258-block  0
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        6:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        6:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        6:  267-block  0
call    0 returned 6
        -:  268:	
        6:  269:  return 0;
unconditional  0 taken 6
        6:  269-block  0
unconditional  1 taken 6
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
unconditional  0 never executed
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
unconditional  1 never executed
        -:  313:}
        -:  314:
function handCard called 6 returned 100% blocks executed 100%
        6:  315:int handCard(int handPos, struct gameState *state) {
        6:  315-block  0
        6:  316:  int currentPlayer = whoseTurn(state);
        6:  316-block  0
call    0 returned 6
        6:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 taken 6
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
unconditional  0 never executed
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  324-block  0
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
unconditional  0 never executed
    $$$$$:  328-block  1
unconditional  1 never executed
    $$$$$:  328-block  2
branch  2 never executed
branch  3 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
unconditional  2 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
unconditional  0 never executed
    $$$$$:  333-block  1
unconditional  1 never executed
    $$$$$:  333-block  2
branch  2 never executed
branch  3 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
unconditional  2 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
unconditional  0 never executed
    $$$$$:  338-block  1
unconditional  1 never executed
    $$$$$:  338-block  2
branch  2 never executed
branch  3 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
unconditional  2 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
unconditional  0 never executed
        -:  344:}
        -:  345:
function whoseTurn called 120 returned 100% blocks executed 100%
      120:  346:int whoseTurn(struct gameState *state) {
      120:  346-block  0
      120:  347:  return state->whoseTurn;
      120:  347-block  0
unconditional  0 taken 120
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  356-block  0
unconditional  1 never executed
    $$$$$:  356-block  1
branch  2 never executed
branch  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  380-block  1
branch  2 never executed
branch  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
    $$$$$:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
unconditional  0 never executed
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
unconditional  0 never executed
    $$$$$:  402-block  1
unconditional  1 never executed
    $$$$$:  402-block  2
branch  2 never executed
branch  3 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    $$$$$:  406-block  0
unconditional  0 never executed
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
unconditional  0 never executed
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
unconditional  0 never executed
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 66 returned 100% blocks executed 100%
       66:  525:int drawCard(int player, struct gameState *state)
       66:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
       66:  528:  if (state->deckCount[player] <= 0){//Deck is empty
       66:  528-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 50
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       36:  533:    for (i = 0; i < state->discardCount[player];i++){
       16:  533-block  0
unconditional  0 taken 16
       20:  533-block  1
unconditional  1 taken 20
       36:  533-block  2
branch  2 taken 20
branch  3 taken 16 (fallthrough)
       20:  534:      state->deck[player][i] = state->discard[player][i];
       20:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       16:  538:    state->deckCount[player] = state->discardCount[player];
       16:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       16:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
       16:  542-block  0
call    0 returned 16
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       16:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       16:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 16
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       16:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       16:  559:    if (deckCounter == 0)
       16:  559-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 4
       12:  560:      return -1;
       12:  560-block  0
unconditional  0 taken 12
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        4:  564-block  0
unconditional  0 taken 4
        -:  565:  }
        -:  566:
        -:  567:  else{
       50:  568:    int count = state->handCount[player];//Get current hand count for player
       50:  568-block  0
unconditional  0 taken 50
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       50:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       50:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       50:  576:    state->deckCount[player]--;
       50:  577:    state->handCount[player]++;//Increment hand count
       50:  577-block  0
unconditional  0 taken 50
        -:  578:  }
        -:  579:
       54:  580:  return 0;
       54:  580-block  0
unconditional  0 taken 54
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645:
        -:  646://The effect for the Adventurer card
function adventurerEffect called 0 returned 0% blocks executed 0%
    #####:  647:int adventurerEffect(struct gameState *state){  
    $$$$$:  647-block  0
    #####:  648:  int currentPlayer = whoseTurn(state);
    $$$$$:  648-block  0
call    0 never executed
    #####:  649:  int drawntreasure=1;
        -:  650:  int temphand[MAX_HAND];
    #####:  651:  int z = 0;
        -:  652:  int cardDrawn;
        -:  653:
    #####:  654:  while(drawntreasure<2){
unconditional  0 never executed
    $$$$$:  654-block  0
branch  1 never executed
branch  2 never executed
    #####:  655:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    $$$$$:  655-block  0
branch  0 never executed
branch  1 never executed
    #####:  656:      shuffle(currentPlayer, state);
    $$$$$:  656-block  0
call    0 never executed
unconditional  1 never executed
        -:  657:    }
    #####:  658:    drawCard(currentPlayer, state);
    $$$$$:  658-block  0
call    0 never executed
    #####:  659:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  660:    if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
unconditional  0 never executed
    #####:  661:      drawntreasure++;
    $$$$$:  661-block  0
unconditional  0 never executed
        -:  662:    else{
        -:  663:      temphand[z]=cardDrawn;
        -:  664:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  665:      z++;
        -:  666:    }
        -:  667:  }
    #####:  668:  while(z-1>=0){
    $$$$$:  668-block  0
unconditional  0 never executed
    $$$$$:  668-block  1
branch  1 never executed
branch  2 never executed
    #####:  669:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  670:    z=z-1;
    $$$$$:  670-block  0
unconditional  0 never executed
        -:  671:  }
    #####:  672:  return 0;
    $$$$$:  672-block  0
unconditional  0 never executed
        -:  673:}
        -:  674:
        -:  675://The effect for the Smithy card
function smithyEffect called 6 returned 100% blocks executed 100%
        6:  676:int smithyEffect(struct gameState *state, int handPos){
        6:  676-block  0
        6:  677:  int currentPlayer = whoseTurn(state);
        6:  677-block  0
call    0 returned 6
        -:  678:  int i;
        -:  679:
        -:  680:  //+3 Cards
       24:  681:  for (i = 0; i <= 2; i++){
unconditional  0 taken 6
unconditional  1 taken 18
       24:  681-block  0
branch  2 taken 18
branch  3 taken 6 (fallthrough)
       18:  682:    drawCard(currentPlayer, state);
       18:  682-block  0
call    0 returned 18
        -:  683:  }
        -:  684:			
        -:  685:  //discard card from hand
        6:  686:  discardCard(handPos, currentPlayer, state, 0);
        6:  686-block  0
call    0 returned 6
        6:  687:  return 0;
unconditional  0 taken 6
        -:  688:}
        -:  689:
        -:  690://The effect for the Village card
function villageEffect called 0 returned 0% blocks executed 0%
    #####:  691:int villageEffect(struct gameState *state, int handPos){
    $$$$$:  691-block  0
    #####:  692:  int currentPlayer = whoseTurn(state);
    $$$$$:  692-block  0
call    0 never executed
        -:  693:  
        -:  694:  //+1 Card
    #####:  695:  drawCard(currentPlayer, state);
call    0 never executed
        -:  696:			
        -:  697:  //+2 Actions
    #####:  698:  state->numActions = state->numActions + 2;
        -:  699:			
        -:  700:  //discard played card from hand
    #####:  701:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  702:  return 0;
unconditional  0 never executed
        -:  703:}
        -:  704:
        -:  705://The effect for the Tribute card
function tributeEffect called 0 returned 0% blocks executed 0%
    #####:  706:int tributeEffect(struct gameState *state){
    $$$$$:  706-block  0
        -:  707:  int i;
        -:  708:
    #####:  709:  int tributeRevealedCards[2] = {-1, -1};
    #####:  710:  int currentPlayer = whoseTurn(state);
    $$$$$:  710-block  0
call    0 never executed
    #####:  711:  int nextPlayer = currentPlayer + 1;
    #####:  712:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  713:    nextPlayer = 0;
    $$$$$:  713-block  0
unconditional  0 never executed
        -:  714:  }
        -:  715:
    #####:  716:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$:  716-block  0
branch  0 never executed
branch  1 never executed
    #####:  717:    if (state->deckCount[nextPlayer] > 0){
    $$$$$:  717-block  0
branch  0 never executed
branch  1 never executed
    #####:  718:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  719:      state->deckCount[nextPlayer]--;
    $$$$$:  719-block  0
unconditional  0 never executed
        -:  720:    }
    #####:  721:    else if (state->discardCount[nextPlayer] > 0){
    $$$$$:  721-block  0
branch  0 never executed
branch  1 never executed
    #####:  722:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  723:      state->discardCount[nextPlayer]--;
    $$$$$:  723-block  0
unconditional  0 never executed
        -:  724:    }
        -:  725:    else{
        -:  726:      //No Card to Reveal
        -:  727:      if (DEBUG){
        -:  728:        printf("No cards to reveal\n");
        -:  729:      }
        -:  730:    }
        -:  731:  }
        -:  732:	    
        -:  733:  else{
    #####:  734:    if (state->deckCount[nextPlayer] == 0){
    $$$$$:  734-block  0
branch  0 never executed
branch  1 never executed
    #####:  735:      for (i = 1; i < state->discardCount[nextPlayer]; i++){
    $$$$$:  735-block  0
unconditional  0 never executed
    $$$$$:  735-block  1
unconditional  1 never executed
    $$$$$:  735-block  2
branch  2 never executed
branch  3 never executed
    #####:  736:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  737:      state->deckCount[nextPlayer]++;
    #####:  738:      state->discard[nextPlayer][i] = -1;
    #####:  739:      state->discardCount[nextPlayer]--;
        -:  740:      }
        -:  741:			    
    #####:  742:      shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$:  742-block  0
call    0 never executed
unconditional  1 never executed
        -:  743:    } 
    #####:  744:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  745:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  746:    state->deckCount[nextPlayer]--;
    #####:  747:    tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  748:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  749:    state->deckCount[nextPlayer]--;
    $$$$$:  749-block  0
unconditional  0 never executed
        -:  750:  }    
        -:  751:		       
    #####:  752:  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$:  752-block  0
branch  0 never executed
branch  1 never executed
    #####:  753:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  754:    state->playedCardCount++;
    #####:  755:    tributeRevealedCards[1] = -1;
    $$$$$:  755-block  0
unconditional  0 never executed
        -:  756:  }
        -:  757:
    #####:  758:  for (i = 0; i <= 2; i ++){
    $$$$$:  758-block  0
unconditional  0 never executed
    $$$$$:  758-block  1
unconditional  1 never executed
    $$$$$:  758-block  2
branch  2 never executed
branch  3 never executed
    #####:  759:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$:  759-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  759-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  759-block  2
branch  4 never executed
branch  5 never executed
    #####:  760:    state->coins += 1;
    $$$$$:  760-block  0
unconditional  0 never executed
        -:  761:    }
        -:  762:		    
    #####:  763:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$:  763-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  763-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  763-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  763-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  763-block  4
branch  8 never executed
branch  9 never executed
    #####:  764:      drawCard(currentPlayer, state);
    $$$$$:  764-block  0
call    0 never executed
    #####:  765:      drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  766:    }
        -:  767:    else{//Action Card
    #####:  768:      state->numActions = state->numActions + 2;
    $$$$$:  768-block  0
unconditional  0 never executed
        -:  769:    }
        -:  770:  }
        -:  771:	    
    #####:  772:  return 0;
    $$$$$:  772-block  0
unconditional  0 never executed
        -:  773:}
        -:  774:
        -:  775://The effect for the Sea Hag card
function sea_hagEffect called 0 returned 0% blocks executed 0%
    #####:  776:int sea_hagEffect(struct gameState *state){
    $$$$$:  776-block  0
        -:  777:  int i;
        -:  778:
    #####:  779:  for (i = 0; i < state->numPlayers; i++){
    $$$$$:  779-block  0
unconditional  0 never executed
    $$$$$:  779-block  1
unconditional  1 never executed
    $$$$$:  779-block  2
branch  2 never executed
branch  3 never executed
    #####:  780:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  781:    state->discardCount[i]++;
    #####:  782:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  783:  }
        -:  784:
    #####:  785:  return 0;
    $$$$$:  785-block  0
unconditional  0 never executed
        -:  786:}
        -:  787:
function cardEffect called 6 returned 100% blocks executed 3%
        6:  788:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        6:  788-block  0
        -:  789:{
        -:  790:  int i;
        -:  791:  int j;
        -:  792:  int k;
        -:  793:  int x;
        -:  794:  int index;
        6:  795:  int currentPlayer = whoseTurn(state);
        6:  795-block  0
call    0 returned 6
        6:  796:  int nextPlayer = currentPlayer + 1;
        -:  797:
        -:  798:  int temphand[MAX_HAND];// moved above the if statement
        -:  799:  
        6:  800:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  801:    nextPlayer = 0;
    $$$$$:  801-block  0
unconditional  0 never executed
        -:  802:  }
        -:  803:
        -:  804:  //uses switch to select card and perform actions
        6:  805:  switch( card ) 
        6:  805-block  0
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 6
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  806:    {
        -:  807:    case adventurer:
    #####:  808:      adventurerEffect(state);
    $$$$$:  808-block  0
call    0 never executed
    #####:  809:      return 0;
unconditional  0 never executed
        -:  810:      
        -:  811:    case council_room:
        -:  812:      //+4 Cards
    #####:  813:      for (i = 0; i < 4; i++)
    $$$$$:  813-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  813-block  1
branch  2 never executed
branch  3 never executed
        -:  814:	{
    #####:  815:	  drawCard(currentPlayer, state);
    $$$$$:  815-block  0
call    0 never executed
        -:  816:	}
        -:  817:			
        -:  818:      //+1 Buy
    #####:  819:      state->numBuys++;
        -:  820:			
        -:  821:      //Each other player draws a card
    #####:  822:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  822-block  0
unconditional  0 never executed
    $$$$$:  822-block  1
unconditional  1 never executed
    $$$$$:  822-block  2
branch  2 never executed
branch  3 never executed
        -:  823:	{
    #####:  824:	  if ( i != currentPlayer )
    $$$$$:  824-block  0
branch  0 never executed
branch  1 never executed
        -:  825:	    {
    #####:  826:	      drawCard(i, state);
    $$$$$:  826-block  0
call    0 never executed
unconditional  1 never executed
        -:  827:	    }
        -:  828:	}
        -:  829:			
        -:  830:      //put played card in played card pile
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  831-block  0
call    0 never executed
        -:  832:			
    #####:  833:      return 0;
unconditional  0 never executed
        -:  834:			
        -:  835:    case feast:
        -:  836:      //gain card with cost up to 5
        -:  837:      //Backup hand
    #####:  838:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  838-block  0
unconditional  0 never executed
    $$$$$:  838-block  1
unconditional  1 never executed
    $$$$$:  838-block  2
branch  2 never executed
branch  3 never executed
    #####:  839:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  840:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  841:      }
        -:  842:      //Backup hand
        -:  843:
        -:  844:      //Update Coins for Buy
    #####:  845:      updateCoins(currentPlayer, state, 5);
    $$$$$:  845-block  0
call    0 never executed
    #####:  846:      x = 1;//Condition to loop on
    #####:  847:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  847-block  0
branch  1 never executed
branch  2 never executed
    #####:  848:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  848-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  849:	  if (DEBUG)
        -:  850:	    printf("None of that card left, sorry!\n");
        -:  851:
        -:  852:	  if (DEBUG){
        -:  853:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  854:	  }
        -:  855:	}
    #####:  856:	else if (state->coins < getCost(choice1)){
    $$$$$:  856-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  857:	  printf("That card is too expensive!\n");
    $$$$$:  857-block  0
call    0 never executed
unconditional  1 never executed
        -:  858:
        -:  859:	  if (DEBUG){
        -:  860:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  861:	  }
        -:  862:	}
        -:  863:	else{
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  867:	  }
        -:  868:
    #####:  869:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  869-block  0
call    0 never executed
    #####:  870:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  871:
        -:  872:	  if (DEBUG){
        -:  873:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  874:	  }
        -:  875:
        -:  876:	}
        -:  877:      }     
        -:  878:
        -:  879:      //Reset Hand
    #####:  880:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  880-block  0
unconditional  0 never executed
    $$$$$:  880-block  1
unconditional  1 never executed
    $$$$$:  880-block  2
branch  2 never executed
branch  3 never executed
    #####:  881:	state->hand[currentPlayer][i] = temphand[i];
    #####:  882:	temphand[i] = -1;
        -:  883:      }
        -:  884:      //Reset Hand
        -:  885:      			
    #####:  886:      return 0;
    $$$$$:  886-block  0
unconditional  0 never executed
        -:  887:			
        -:  888:    case gardens:
    #####:  889:      return -1;
    $$$$$:  889-block  0
unconditional  0 never executed
        -:  890:			
        -:  891:    case mine:
    #####:  892:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  893:
    #####:  894:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  894-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  894-block  1
branch  2 never executed
branch  3 never executed
        -:  895:	{
    #####:  896:	  return -1;
    $$$$$:  896-block  0
unconditional  0 never executed
        -:  897:	}
        -:  898:		
    #####:  899:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  899-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  899-block  1
branch  2 never executed
branch  3 never executed
        -:  900:	{
    #####:  901:	  return -1;
    $$$$$:  901-block  0
unconditional  0 never executed
        -:  902:	}
        -:  903:
    #####:  904:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  904-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  905:	{
    #####:  906:	  return -1;
    $$$$$:  906-block  0
unconditional  0 never executed
        -:  907:	}
        -:  908:
    #####:  909:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  909-block  0
call    0 never executed
        -:  910:
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  913:
        -:  914:      //discard trashed card
    #####:  915:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  915-block  0
unconditional  1 never executed
    $$$$$:  915-block  1
branch  2 never executed
branch  3 never executed
        -:  916:	{
    #####:  917:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  917-block  0
branch  0 never executed
branch  1 never executed
        -:  918:	    {
    #####:  919:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  919-block  0
call    0 never executed
    #####:  920:	      break;
unconditional  0 never executed
        -:  921:	    }
        -:  922:	}
        -:  923:			
    #####:  924:      return 0;
    $$$$$:  924-block  0
unconditional  0 never executed
        -:  925:			
        -:  926:    case remodel:
    #####:  927:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  928:
    #####:  929:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  929-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  930:	{
    #####:  931:	  return -1;
    $$$$$:  931-block  0
unconditional  0 never executed
        -:  932:	}
        -:  933:
    #####:  934:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  934-block  0
call    0 never executed
        -:  935:
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  938:
        -:  939:      //discard trashed card
    #####:  940:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  940-block  0
unconditional  1 never executed
    $$$$$:  940-block  1
branch  2 never executed
branch  3 never executed
        -:  941:	{
    #####:  942:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  942-block  0
branch  0 never executed
branch  1 never executed
        -:  943:	    {
    #####:  944:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  944-block  0
call    0 never executed
    #####:  945:	      break;
unconditional  0 never executed
        -:  946:	    }
        -:  947:	}
        -:  948:
        -:  949:
    #####:  950:      return 0;
    $$$$$:  950-block  0
unconditional  0 never executed
        -:  951:		
        -:  952:    case smithy:
        6:  953:      smithyEffect(state, handPos);
        6:  953-block  0
call    0 returned 6
        6:  954:      return 0;
unconditional  0 taken 6
        -:  955:
        -:  956:    case village:
    #####:  957:      villageEffect(state, handPos);
    $$$$$:  957-block  0
call    0 never executed
    #####:  958:      return 0;	
unconditional  0 never executed
        -:  959:
        -:  960:    case baron:
    #####:  961:      state->numBuys++;//Increase buys by 1!
    #####:  962:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
    #####:  963:	int p = 0;//Iterator for hand!
    #####:  964:	int card_not_discarded = 1;//Flag for discard set!
    #####:  965:	while(card_not_discarded){
    $$$$$:  965-block  0
unconditional  0 never executed
    $$$$$:  965-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  965-block  2
unconditional  3 never executed
    #####:  966:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  966-block  0
branch  0 never executed
branch  1 never executed
    #####:  967:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  968:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  969:	    state->discardCount[currentPlayer]++;
    #####:  970:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  970-block  0
unconditional  0 never executed
    $$$$$:  970-block  1
unconditional  1 never executed
    $$$$$:  970-block  2
branch  2 never executed
branch  3 never executed
    #####:  971:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  972:	    }
    #####:  973:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  974:	    state->handCount[currentPlayer]--;
    #####:  975:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  975-block  0
unconditional  0 never executed
        -:  976:	  }
    #####:  977:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  977-block  0
branch  0 never executed
branch  1 never executed
        -:  978:	    if(DEBUG) {
        -:  979:	      printf("No estate cards in your hand, invalid choice\n");
        -:  980:	      printf("Must gain an estate if there are any\n");
        -:  981:	    }
    #####:  982:	    if (supplyCount(estate, state) > 0){
    $$$$$:  982-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  983:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  983-block  0
call    0 never executed
    #####:  984:	      state->supplyCount[estate]--;//Decrement estates
    #####:  985:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  986:		isGameOver(state);
    $$$$$:  986-block  0
call    0 never executed
unconditional  1 never executed
        -:  987:	      }
        -:  988:	    }
    #####:  989:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  989-block  0
unconditional  0 never executed
        -:  990:	  }
        -:  991:			    
        -:  992:	  else{
    #####:  993:	    p++;//Next card
    $$$$$:  993-block  0
unconditional  0 never executed
        -:  994:	  }
        -:  995:	}
        -:  996:      }
        -:  997:			    
        -:  998:      else{
    #####:  999:	if (supplyCount(estate, state) > 0){
    $$$$$:  999-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1000:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$: 1000-block  0
call    0 never executed
    #####: 1001:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1002:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1003:	    isGameOver(state);
    $$$$$: 1003-block  0
call    0 never executed
unconditional  1 never executed
        -: 1004:	  }
        -: 1005:	}
        -: 1006:      }
        -: 1007:	    
        -: 1008:      
    #####: 1009:      return 0;
    $$$$$: 1009-block  0
unconditional  0 never executed
        -: 1010:		
        -: 1011:    case great_hall:
        -: 1012:      //+1 Card
    #####: 1013:      drawCard(currentPlayer, state);
    $$$$$: 1013-block  0
call    0 never executed
        -: 1014:			
        -: 1015:      //+1 Actions
    #####: 1016:      state->numActions++;
        -: 1017:			
        -: 1018:      //discard card from hand
    #####: 1019:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1020:      return 0;
unconditional  0 never executed
        -: 1021:		
        -: 1022:    case minion:
        -: 1023:      //+1 action
    #####: 1024:      state->numActions++;
        -: 1025:			
        -: 1026:      //discard card from hand
    #####: 1027:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1027-block  0
call    0 never executed
        -: 1028:			
    #####: 1029:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  state->coins = state->coins + 2;
    $$$$$: 1031-block  0
unconditional  0 never executed
        -: 1032:	}
        -: 1033:			
    #####: 1034:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$: 1034-block  0
branch  0 never executed
branch  1 never executed
        -: 1035:	{
        -: 1036:	  //discard hand
    #####: 1037:	  while(numHandCards(state) > 0)
    $$$$$: 1037-block  0
unconditional  0 never executed
    $$$$$: 1037-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1038:	    {
    #####: 1039:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1039-block  0
call    0 never executed
unconditional  1 never executed
        -: 1040:	    }
        -: 1041:				
        -: 1042:	  //draw 4
    #####: 1043:	  for (i = 0; i < 4; i++)
    $$$$$: 1043-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1043-block  1
branch  2 never executed
branch  3 never executed
        -: 1044:	    {
    #####: 1045:	      drawCard(currentPlayer, state);
    $$$$$: 1045-block  0
call    0 never executed
        -: 1046:	    }
        -: 1047:				
        -: 1048:	  //other players discard hand and redraw if hand size > 4
    #####: 1049:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1049-block  0
unconditional  0 never executed
    $$$$$: 1049-block  1
unconditional  1 never executed
    $$$$$: 1049-block  2
branch  2 never executed
branch  3 never executed
        -: 1050:	    {
    #####: 1051:	      if (i != currentPlayer)
    $$$$$: 1051-block  0
branch  0 never executed
branch  1 never executed
        -: 1052:		{
    #####: 1053:		  if ( state->handCount[i] > 4 )
    $$$$$: 1053-block  0
branch  0 never executed
branch  1 never executed
        -: 1054:		    {
        -: 1055:		      //discard hand
    #####: 1056:		      while( state->handCount[i] > 0 )
    $$$$$: 1056-block  0
unconditional  0 never executed
    $$$$$: 1056-block  1
branch  1 never executed
branch  2 never executed
        -: 1057:			{
    #####: 1058:			  discardCard(handPos, i, state, 0);
    $$$$$: 1058-block  0
call    0 never executed
unconditional  1 never executed
        -: 1059:			}
        -: 1060:							
        -: 1061:		      //draw 4
    #####: 1062:		      for (j = 0; j < 4; j++)
    $$$$$: 1062-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1062-block  1
branch  2 never executed
branch  3 never executed
        -: 1063:			{
    #####: 1064:			  drawCard(i, state);
    $$$$$: 1064-block  0
call    0 never executed
        -: 1065:			}
        -: 1066:		    }
        -: 1067:		}
        -: 1068:	    }
        -: 1069:				
        -: 1070:	}
    #####: 1071:      return 0;
    $$$$$: 1071-block  0
unconditional  0 never executed
        -: 1072:		
        -: 1073:    case steward:
    #####: 1074:      if (choice1 == 1)
    $$$$$: 1074-block  0
branch  0 never executed
branch  1 never executed
        -: 1075:	{
        -: 1076:	  //+2 cards
    #####: 1077:	  drawCard(currentPlayer, state);
    $$$$$: 1077-block  0
call    0 never executed
    #####: 1078:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1079:	}
    #####: 1080:      else if (choice1 == 2)
    $$$$$: 1080-block  0
branch  0 never executed
branch  1 never executed
        -: 1081:	{
        -: 1082:	  //+2 coins
    #####: 1083:	  state->coins = state->coins + 2;
    $$$$$: 1083-block  0
unconditional  0 never executed
        -: 1084:	}
        -: 1085:      else
        -: 1086:	{
        -: 1087:	  //trash 2 cards in hand
    #####: 1088:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1088-block  0
call    0 never executed
    #####: 1089:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1090:	}
        -: 1091:			
        -: 1092:      //discard card from hand
    #####: 1093:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1093-block  0
call    0 never executed
    #####: 1094:      return 0;
unconditional  0 never executed
        -: 1095:		
        -: 1096:    case tribute:
    #####: 1097:      tributeEffect(state);
    $$$$$: 1097-block  0
call    0 never executed
    #####: 1098:      return 0;	
unconditional  0 never executed
        -: 1099:
        -: 1100:    case ambassador:
    #####: 1101:      j = 0;		//used to check if player has enough cards to discard
        -: 1102:
    #####: 1103:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1103-block  1
branch  2 never executed
branch  3 never executed
        -: 1104:	{
    #####: 1105:	  return -1;				
    $$$$$: 1105-block  0
unconditional  0 never executed
        -: 1106:	}
        -: 1107:
    #####: 1108:      if (choice1 == handPos)
    $$$$$: 1108-block  0
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  return -1;
    $$$$$: 1110-block  0
unconditional  0 never executed
        -: 1111:	}
        -: 1112:
    #####: 1113:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1113-block  0
unconditional  0 never executed
    $$$$$: 1113-block  1
unconditional  1 never executed
    $$$$$: 1113-block  2
branch  2 never executed
branch  3 never executed
        -: 1114:	{
    #####: 1115:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1115-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1115-block  2
branch  4 never executed
branch  5 never executed
        -: 1116:	    {
    #####: 1117:	      j++;
    $$$$$: 1117-block  0
unconditional  0 never executed
        -: 1118:	    }
        -: 1119:	}
    #####: 1120:      if (j < choice2)
    $$$$$: 1120-block  0
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  return -1;				
    $$$$$: 1122-block  0
unconditional  0 never executed
        -: 1123:	}
        -: 1124:
        -: 1125:      if (DEBUG) 
        -: 1126:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1127:
        -: 1128:      //increase supply count for choosen card by amount being discarded
    #####: 1129:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1130:			
        -: 1131:      //each other player gains a copy of revealed card
    #####: 1132:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1132-block  0
unconditional  0 never executed
    $$$$$: 1132-block  1
unconditional  1 never executed
    $$$$$: 1132-block  2
branch  2 never executed
branch  3 never executed
        -: 1133:	{
    #####: 1134:	  if (i != currentPlayer)
    $$$$$: 1134-block  0
branch  0 never executed
branch  1 never executed
        -: 1135:	    {
    #####: 1136:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1136-block  0
call    0 never executed
unconditional  1 never executed
        -: 1137:	    }
        -: 1138:	}
        -: 1139:
        -: 1140:      //discard played card from hand
    #####: 1141:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1141-block  0
call    0 never executed
        -: 1142:
        -: 1143:      //trash copies of cards returned to supply
    #####: 1144:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1144-block  0
unconditional  1 never executed
    $$$$$: 1144-block  1
branch  2 never executed
branch  3 never executed
        -: 1145:	{
    #####: 1146:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1146-block  0
unconditional  0 never executed
    $$$$$: 1146-block  1
unconditional  1 never executed
    $$$$$: 1146-block  2
branch  2 never executed
branch  3 never executed
        -: 1147:	    {
    #####: 1148:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1148-block  0
branch  0 never executed
branch  1 never executed
        -: 1149:		{
    #####: 1150:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1150-block  0
call    0 never executed
    #####: 1151:		  break;
unconditional  0 never executed
        -: 1152:		}
        -: 1153:	    }
        -: 1154:	}			
        -: 1155:
    #####: 1156:      return 0;
    $$$$$: 1156-block  0
unconditional  0 never executed
        -: 1157:		
        -: 1158:    case cutpurse:
        -: 1159:
    #####: 1160:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1160-block  0
call    0 never executed
    #####: 1161:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1161-block  0
unconditional  1 never executed
    $$$$$: 1161-block  1
branch  2 never executed
branch  3 never executed
        -: 1162:	{
    #####: 1163:	  if (i != currentPlayer)
    $$$$$: 1163-block  0
branch  0 never executed
branch  1 never executed
        -: 1164:	    {
    #####: 1165:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1165-block  0
unconditional  0 never executed
    $$$$$: 1165-block  1
unconditional  1 never executed
    $$$$$: 1165-block  2
branch  2 never executed
branch  3 never executed
        -: 1166:		{
    #####: 1167:		  if (state->hand[i][j] == copper)
    $$$$$: 1167-block  0
branch  0 never executed
branch  1 never executed
        -: 1168:		    {
    #####: 1169:		      discardCard(j, i, state, 0);
    $$$$$: 1169-block  0
call    0 never executed
    #####: 1170:		      break;
unconditional  0 never executed
        -: 1171:		    }
    #####: 1172:		  if (j == state->handCount[i])
    $$$$$: 1172-block  0
branch  0 never executed
branch  1 never executed
        -: 1173:		    {
    #####: 1174:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1174-block  0
unconditional  0 never executed
    $$$$$: 1174-block  1
unconditional  1 never executed
    $$$$$: 1174-block  2
branch  2 never executed
branch  3 never executed
        -: 1175:			{
        -: 1176:			  if (DEBUG)
        -: 1177:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1178:			}	
    #####: 1179:		      break;
    $$$$$: 1179-block  0
unconditional  0 never executed
        -: 1180:		    }		
        -: 1181:		}
        -: 1182:					
        -: 1183:	    }
        -: 1184:				
        -: 1185:	}				
        -: 1186:
        -: 1187:      //discard played card from hand
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1188-block  0
call    0 never executed
        -: 1189:
    #####: 1190:      return 0;
unconditional  0 never executed
        -: 1191:
        -: 1192:		
        -: 1193:    case embargo: 
        -: 1194:      //+2 Coins
    #####: 1195:      state->coins = state->coins + 2;
        -: 1196:			
        -: 1197:      //see if selected pile is in play
    #####: 1198:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1198-block  0
branch  0 never executed
branch  1 never executed
        -: 1199:	{
    #####: 1200:	  return -1;
    $$$$$: 1200-block  0
unconditional  0 never executed
        -: 1201:	}
        -: 1202:			
        -: 1203:      //add embargo token to selected supply pile
    #####: 1204:      state->embargoTokens[choice1]++;
        -: 1205:			
        -: 1206:      //trash card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1207-block  0
call    0 never executed
    #####: 1208:      return 0;
unconditional  0 never executed
        -: 1209:		
        -: 1210:    case outpost:
        -: 1211:      //set outpost flag
    #####: 1212:      state->outpostPlayed++;
        -: 1213:			
        -: 1214:      //discard card
    #####: 1215:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1215-block  0
call    0 never executed
    #####: 1216:      return 0;
unconditional  0 never executed
        -: 1217:		
        -: 1218:    case salvager:
        -: 1219:      //+1 buy
    #####: 1220:      state->numBuys++;
        -: 1221:			
    #####: 1222:      if (choice1)
    $$$$$: 1222-block  0
branch  0 never executed
branch  1 never executed
        -: 1223:	{
        -: 1224:	  //gain coins equal to trashed card
    #####: 1225:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1225-block  0
call    0 never executed
call    1 never executed
        -: 1226:	  //trash card
    #####: 1227:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1228:	}
        -: 1229:			
        -: 1230:      //discard card
    #####: 1231:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1231-block  0
call    0 never executed
    #####: 1232:      return 0;
unconditional  0 never executed
        -: 1233:		
        -: 1234:    case sea_hag:
    #####: 1235:      sea_hagEffect(state);
    $$$$$: 1235-block  0
call    0 never executed
    #####: 1236:      return 0;	
unconditional  0 never executed
        -: 1237:
        -: 1238:    case treasure_map:
        -: 1239:      //search hand for another treasure_map
    #####: 1240:      index = -1;
    #####: 1241:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1241-block  0
unconditional  0 never executed
    $$$$$: 1241-block  1
unconditional  1 never executed
    $$$$$: 1241-block  2
branch  2 never executed
branch  3 never executed
        -: 1242:	{
    #####: 1243:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1243-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1243-block  1
branch  2 never executed
branch  3 never executed
        -: 1244:	    {
    #####: 1245:	      index = i;
    #####: 1246:	      break;
    $$$$$: 1246-block  0
unconditional  0 never executed
        -: 1247:	    }
        -: 1248:	}
    #####: 1249:      if (index > -1)
    $$$$$: 1249-block  0
branch  0 never executed
branch  1 never executed
        -: 1250:	{
        -: 1251:	  //trash both treasure cards
    #####: 1252:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1252-block  0
call    0 never executed
    #####: 1253:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1254:
        -: 1255:	  //gain 4 Gold cards
    #####: 1256:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1256-block  0
branch  2 never executed
branch  3 never executed
        -: 1257:	    {
    #####: 1258:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1258-block  0
call    0 never executed
        -: 1259:	    }
        -: 1260:				
        -: 1261:	  //return success
    #####: 1262:	  return 1;
    $$$$$: 1262-block  0
unconditional  0 never executed
        -: 1263:	}
        -: 1264:			
        -: 1265:      //no second treasure_map found in hand
    #####: 1266:      return -1;
    $$$$$: 1266-block  0
unconditional  0 never executed
        -: 1267:    }
        -: 1268:	
        6: 1269:  return -1;
    $$$$$: 1269-block  0
unconditional  0 never executed
        6: 1269-block  1
unconditional  1 taken 6
        -: 1270:}
        -: 1271:
function discardCard called 12 returned 100% blocks executed 78%
       12: 1272:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
       12: 1272-block  0
        -: 1273:{
        -: 1274:	
        -: 1275:  //if card is not trashed, added to Played pile 
       12: 1276:  if (trashFlag < 1)
       12: 1276-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
        -: 1277:    {
        -: 1278:      //add card to played pile
       12: 1279:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       12: 1280:      state->playedCardCount++;
       12: 1280-block  0
unconditional  0 taken 12
        -: 1281:    }
        -: 1282:	
        -: 1283:  //set played card to -1
       12: 1284:  state->hand[currentPlayer][handPos] = -1;
        -: 1285:	
        -: 1286:  //remove card from player's hand
       12: 1287:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
       12: 1287-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -: 1288:    {
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
    $$$$$: 1290-block  0
unconditional  0 never executed
        -: 1291:    }
       12: 1292:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
       12: 1292-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -: 1293:    {
        -: 1294:      //reduce number of cards in hand
    #####: 1295:      state->handCount[currentPlayer]--;
    $$$$$: 1295-block  0
unconditional  0 never executed
        -: 1296:    }
        -: 1297:  else 	
        -: 1298:    {
        -: 1299:      //replace discarded card with last card in hand
       12: 1300:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1301:      //set last card to -1
       12: 1302:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1303:      //reduce number of cards in hand
       12: 1304:      state->handCount[currentPlayer]--;
       12: 1304-block  0
unconditional  0 taken 12
        -: 1305:    }
        -: 1306:	
       12: 1307:  return 0;
       12: 1307-block  0
unconditional  0 taken 12
        -: 1308:}
        -: 1309:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1310:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1310-block  0
        -: 1311:{
        -: 1312:  //Note: supplyPos is enum of choosen card
        -: 1313:	
        -: 1314:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1315:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1315-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1316:    {
    #####: 1317:      return -1;
    $$$$$: 1317-block  0
unconditional  0 never executed
        -: 1318:    }
        -: 1319:	
        -: 1320:  //added card for [whoseTurn] current player:
        -: 1321:  // toFlag = 0 : add to discard
        -: 1322:  // toFlag = 1 : add to deck
        -: 1323:  // toFlag = 2 : add to hand
        -: 1324:
    #####: 1325:  if (toFlag == 1)
    $$$$$: 1325-block  0
branch  0 never executed
branch  1 never executed
        -: 1326:    {
    #####: 1327:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1328:      state->deckCount[player]++;
    $$$$$: 1328-block  0
unconditional  0 never executed
        -: 1329:    }
    #####: 1330:  else if (toFlag == 2)
    $$$$$: 1330-block  0
branch  0 never executed
branch  1 never executed
        -: 1331:    {
    #####: 1332:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1333:      state->handCount[player]++;
    $$$$$: 1333-block  0
unconditional  0 never executed
        -: 1334:    }
        -: 1335:  else
        -: 1336:    {
    #####: 1337:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1338:      state->discardCount[player]++;
    $$$$$: 1338-block  0
unconditional  0 never executed
        -: 1339:    }
        -: 1340:	
        -: 1341:  //decrease number in supply pile
    #####: 1342:  state->supplyCount[supplyPos]--;
        -: 1343:	 
    #####: 1344:  return 0;
    $$$$$: 1344-block  0
unconditional  0 never executed
        -: 1345:}
        -: 1346:
function updateCoins called 12 returned 100% blocks executed 82%
       12: 1347:int updateCoins(int player, struct gameState *state, int bonus)
       12: 1347-block  0
        -: 1348:{
        -: 1349:  int i;
        -: 1350:	
        -: 1351:  //reset coin count
       12: 1352:  state->coins = 0;
        -: 1353:
        -: 1354:  //add coins for each Treasure card in player's hand
       78: 1355:  for (i = 0; i < state->handCount[player]; i++)
       12: 1355-block  0
unconditional  0 taken 12
       66: 1355-block  1
unconditional  1 taken 66
       78: 1355-block  2
branch  2 taken 66
branch  3 taken 12 (fallthrough)
        -: 1356:    {
       66: 1357:      if (state->hand[player][i] == copper)
       66: 1357-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 14
        -: 1358:	{
       52: 1359:	  state->coins += 1;
       52: 1359-block  0
unconditional  0 taken 52
        -: 1360:	}
       14: 1361:      else if (state->hand[player][i] == silver)
       14: 1361-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
        -: 1362:	{
    #####: 1363:	  state->coins += 2;
    $$$$$: 1363-block  0
unconditional  0 never executed
        -: 1364:	}
       14: 1365:      else if (state->hand[player][i] == gold)
       14: 1365-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
        -: 1366:	{
    #####: 1367:	  state->coins += 3;
    $$$$$: 1367-block  0
unconditional  0 never executed
        -: 1368:	}	
        -: 1369:    }	
        -: 1370:
        -: 1371:  //add bonus
       12: 1372:  state->coins += bonus;
        -: 1373:
       12: 1374:  return 0;
       12: 1374-block  0
unconditional  0 taken 12
        -: 1375:}
        -: 1376:
        -: 1377:
        -: 1378://end of dominion.c
        -: 1379:
